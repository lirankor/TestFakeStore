# CURSOR RULES FOR REACT TYPESCRIPT E-COMMERCE PROJECT

## 🏗️ PROJECT ARCHITECTURE

### Tech Stack

- React 19 + TypeScript
- Vite build tool
- Ant Design (antd) for UI components
- **Tailwind CSS 3** for styling (with PostCSS)
- React Router DOM for routing
- TanStack React Query for server state
- Zustand for client state
- Axios for API calls
- ESLint for code quality

### Project Structure

- `/src/components/` - Feature-organized components (auth, cart, product, layout, ui)
- `/src/hooks/` - Custom hooks for business logic
- `/src/store/` - Zustand stores for client-side state
- `/src/types/` - TypeScript interfaces and types
- `/src/services/` - API layer and external service calls
- `/src/pages/` - Route components
- `/src/lib/` - Utility functions and configurations

## 📝 CODE GENERATION RULES

### TypeScript & Types

- Always use TypeScript with strict type checking
- Define interfaces in `/src/types/` with descriptive names ending in `Interface.ts`
- Use `type` for unions, primitives, and computed types
- Use `interface` for object shapes and extensible structures
- Export all types and interfaces
- Include optional properties with `?` when appropriate

### React Components

- Use functional components with TypeScript
- Use `export default` for main component, named exports for utilities
- Define props interface above component with `Props` suffix
- Use `React.FC` sparingly, prefer direct typing: `({ prop }: Props) => {}`
- Include `className?: string` prop for styling flexibility
- Wrap components in `React.memo()` for performance when appropriate

### State Management Pattern

- **Client State**: Use Zustand stores in `/src/store/`
- **Server State**: Use TanStack React Query in custom hooks
- Never mix client and server state in the same store
- Store naming: `use[Feature]Store` (e.g., `useCartStore`, `useAuthStore`)
- Hook naming: `use[Action][Feature]` (e.g., `useAddToCart`, `useGetProducts`)

### Custom Hooks Pattern

```typescript
// Server state hooks (React Query)
export const useGetProducts = () => {
  return useQuery({
    queryKey: ["products"],
    queryFn: getProducts,
  });
};

// Mutation hooks with error handling
export const useAddToCart = () => {
  const { message } = App.useApp();

  return useMutation({
    mutationFn: async (data) => {
      // implementation
    },
    onSuccess: () => {
      message.success("Success message");
    },
    onError: (error) => {
      console.error("Error:", error);
      message.error("Error message");
    },
  });
};
```

### Zustand Store Pattern

```typescript
interface [Feature]State {
  // State properties
  items: Item[];
  loading: boolean;

  // Actions
  addItem: (item: Item) => void;
  removeItem: (id: number) => void;
}

export const use[Feature]Store = create<[Feature]State>()(
  persist(
    (set, get) => ({
      // Initial state
      items: [],
      loading: false,

      // Actions with immutable updates
      addItem: (item) => set((state) => ({
        items: [...state.items, item]
      })),
    }),
    {
      name: '[feature]-storage',
      storage: createJSONStorage(() => localStorage),
    }
  )
);
```

### API Service Pattern

```typescript
// In /src/services/api.ts
const api = axios.create({
  baseURL: 'https://api.example.com',
});

export const get[Resource] = async (id?: string) => {
  const response = await api.get(`/[resource]${id ? `/${id}` : ''}`);
  return response.data;
};

export const create[Resource] = async (data: [Resource]Data) => {
  const response = await api.post('/[resource]', data);
  return response.data;
};
```

### Component Structure

```typescript
interface [Component]Props {
  // Props definition
  prop: string;
  className?: string;
}

export default function [Component]({ prop, className = '' }: [Component]Props) {
  // Hooks at the top
  const { data } = useQuery();
  const { mutate } = useMutation();

  // Event handlers
  const handleAction = (e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    // Action logic
  };

  return (
    <div className={`base-classes ${className}`}>
      {/* JSX content */}
    </div>
  );
}
```

## 🎨 TAILWIND 3 STYLING GUIDELINES

### Tailwind 3 + Ant Design Integration

- Use **Tailwind 3 with PostCSS** - traditional setup
- Import syntax: `@tailwind base; @tailwind components; @tailwind utilities;` in CSS files
- Use Ant Design components for complex UI (forms, tables, modals)
- Use Tailwind 3 for layout, spacing, and custom styling
- **Reference**: https://tailwindcss.com/docs/installation
- Combine classes: `className="ant-component-class custom-tailwind-classes"`
- Use Ant Design's `App.useApp()` for notifications and modals

### Project-Specific Design System

Our project uses a comprehensive glass morphism design system with:

#### CSS Variables (defined in src/index.css)

```css
:root {
  /* Theme colors */
  --background: hsl(210, 40%, 98%);
  --foreground: hsl(222.2, 84%, 4.9%);
  --primary: hsl(208, 100%, 50%);
  --secondary: hsl(210, 40%, 96%);
  --muted: hsl(210, 40%, 96%);
  --accent: hsl(210, 40%, 96%);
  --destructive: hsl(0, 84.2%, 60.2%);
  --border: hsl(214.3, 31.8%, 91.4%);
  --input: hsl(214.3, 31.8%, 91.4%);
  --ring: hsl(208, 100%, 50%);
  --radius: 0.75rem;

  /* Glass effects */
  --glass-bg: hsla(0, 0%, 100%, 0.1);
  --glass-border: hsla(0, 0%, 100%, 0.2);
  --glass-backdrop: blur(20px);

  /* Gradients */
  --gradient-primary: linear-gradient(
    135deg,
    hsl(208, 100%, 50%) 0%,
    hsl(262, 83%, 58%) 100%
  );
  --gradient-secondary: linear-gradient(
    135deg,
    hsl(215, 98%, 61%) 0%,
    hsl(262, 83%, 58%) 100%
  );
}
```

#### Glass Morphism Component Classes

```css
.glass-effect        /* General glass background with backdrop blur */
/* General glass background with backdrop blur */
/* General glass background with backdrop blur */
/* General glass background with backdrop blur */
.glass-card          /* Card with strong glass effect */
.nav-glass          /* Navigation with subtle glass */
.sidebar-glass      /* Sidebar with strong glass */
.product-card; /* Product card with glass + hover effects */
```

#### Gradient Classes

```css
.gradient-bg         /* Primary gradient background */
/* Primary gradient background */
/* Primary gradient background */
/* Primary gradient background */
.gradient-secondary  /* Secondary gradient background */
.text-gradient; /* Gradient text effect */
```

#### Animation Classes

```css
.hover-scale         /* Scale on hover */
/* Scale on hover */
/* Scale on hover */
/* Scale on hover */
.floating-animation; /* Floating keyframe animation */
```

### Tailwind 3 Configuration Integration

Our `tailwind.config.ts` extends the theme with:

- **Custom Colors**: All CSS variables mapped to Tailwind classes
- **Border Radius**: Using CSS variables for consistent radius
- **Animations**: accordion-down, accordion-up, floating
- **Backdrop Blur**: Typography, animations, and line-clamp support

### CSS Class Patterns

- Use semantic class names: `product-card`, `user-profile`, `cart-summary`
- Glass morphism: `glass-effect`, `glass-card`, `nav-glass`
- Gradients: `gradient-bg`, `gradient-secondary`, `text-gradient`
- Responsive design: Always include responsive classes (`sm:`, `md:`, `lg:`)
- Background patterns: `bg-linear-to-br from-blue-50 via-purple-50 to-indigo-100`

### Component Styling Conventions

```typescript
// Product Cards
<Card className="product-card hover:shadow-xl transition-all duration-300">

// Buttons with gradients
<Button className="gradient-bg border-0 text-white font-medium">

// Glass effect containers
<div className="glass-effect p-6 rounded-lg">

// Navigation elements
<Header className="nav-glass sticky top-0 z-50">

// Text with gradient
<h1 className="text-gradient text-4xl font-bold">
```

## 🔧 BEST PRACTICES

### Error Handling

- Always wrap API calls in try-catch or use React Query error handling
- Use Ant Design's `message` API for user feedback
- Log errors to console for debugging
- Provide user-friendly error messages

### Performance

- Use `React.memo()` for expensive components
- Implement proper loading states with skeletons
- Use React Query's caching and background refetching
- Persist important client state with Zustand's persist middleware

### File Organization

- Group related files by feature, not by type
- Use barrel exports (`index.ts`) for clean imports
- Keep components focused and single-responsibility
- Separate business logic into custom hooks

### Event Handling

- Always prevent default and stop propagation when needed
- Use proper TypeScript event types (`React.MouseEvent`, `React.FormEvent`)
- Handle loading and error states in mutations
- Provide immediate user feedback for actions

### Routing

- Use React Router DOM v7 syntax
- Define routes in `App.tsx`
- Use `useNavigate` for programmatic navigation
- Include proper route parameters typing

## 🚀 COMPONENT GENERATION TEMPLATES

### Page Component

```typescript
import { Layout } from 'antd';

export default function [Page]Page() {
  return (
    <Layout.Content className="container mx-auto px-4 py-8">
      <div className="max-w-6xl mx-auto">
        <h1 className="text-3xl font-bold mb-8 text-gradient">[Page Title]</h1>
        {/* Page content */}
      </div>
    </Layout.Content>
  );
}
```

### Glass Card Component

```typescript
interface [Component]Props {
  title: string;
  children: React.ReactNode;
  className?: string;
}

export default function [Component]Card({
  title,
  children,
  className = ""
}: [Component]Props) {
  return (
    <div className={`glass-card p-6 rounded-lg ${className}`}>
      <h3 className="text-xl font-semibold mb-4 text-foreground">{title}</h3>
      {children}
    </div>
  );
}
```

### Form Component

```typescript
import { Form, Input, Button } from 'antd';
import { useState } from 'react';

interface [Form]Data {
  field: string;
}

export default function [Form]Form() {
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (values: [Form]Data) => {
    setLoading(true);
    try {
      // Handle form submission
      console.log('Form values:', values);
    } catch (error) {
      console.error('Form error:', error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="glass-card p-6 rounded-lg max-w-md mx-auto">
      <Form
        form={form}
        layout="vertical"
        onFinish={handleSubmit}
      >
        <Form.Item
          name="field"
          label="Field Label"
          rules={[{ required: true, message: 'Please enter field' }]}
        >
          <Input placeholder="Enter field" className="glass-effect" />
        </Form.Item>

        <Form.Item>
          <Button
            type="primary"
            htmlType="submit"
            loading={loading}
            className="gradient-bg border-0 w-full font-medium"
          >
            Submit
          </Button>
        </Form.Item>
      </Form>
    </div>
  );
}
```

## 🎯 CODE QUALITY

### ESLint Rules

- Follow existing ESLint configuration
- Use `const` assertions for literal types
- Prefer template literals over string concatenation
- Use optional chaining (`?.`) and nullish coalescing (`??`)

### Import Organization

```typescript
// External libraries
import React from "react";
import { useQuery } from "@tanstack/react-query";
import { Card, Button } from "antd";

// Internal imports - types first
import type { Product } from "../types/ProductInterface";

// Internal imports - utilities and hooks
import { useAddToCart } from "../hooks/useCart";
import { api } from "../services/api";
```

### Comments and Documentation

- Write self-documenting code with clear naming
- Add JSDoc comments for complex functions
- Include TODO comments for future improvements
- Document business logic and complex state transformations

## 🔄 MIGRATION GUIDELINES

When updating existing code:

- Always maintain backward compatibility
- Update TypeScript interfaces when adding new fields
- Regenerate types after API changes
- Test all affected components after changes
- Update related tests and documentation

Remember: Consistency with existing patterns is more important than perfect code. Always check similar existing files before creating new ones.
